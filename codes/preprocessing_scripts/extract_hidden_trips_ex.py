"""
This code extends the hidden trip file.
It's use comes after the initial run of the simulation
and we have identified some of the visits as being 
broken. This output from the simulation is converted
into hidden trips.

Author: Chase Duncan
Contact: cddunca2@illinois.edu
"""

import csv
import calendar
from collections import defaultdict
from tools import *
from datetime import datetime

"""
CONSTANTS
"""
DATA_DIR =  "/Users/chaseduncan/Desktop/capital/data/capital_trip_data/broken_visits.csv"
HIDDEN_TRIP_FILE = "/Users/chaseduncan/Desktop/capital/data/capital_trip_data/hidden_trips.csv"
OUTPUT = "/Users/chaseduncan/Desktop/capital/data/capital_trip_data/hidden_trips_ex.csv"

DT_FMT = "%Y-%m-%d %H:%M:%S"
NUM_TRIPS = 15374
END_OF_TIME ='2014-04-01 00:06:00'
"""
DATA STRUCTURES
"""
logMsg("Initializing data structures.")

#list for holding all hidden trips
hidden_trips = []

#open the trip file and strip it's header
trips = csv.reader(open(DATA_DIR, "r"))
trips.next()

#dictionary for mapping names to ids
names_to_ids = defaultdict()


"""
WORK
"""
process_num = 1
logMsg("Processing trip file.")
for [start_time, end_time, start_station, start_sid, end_station, end_sid, prob, bike_id] in trips:
	if(end_time == END_OF_TIME):
		end_station = 'null station'
		end_sid = '00000'

	process_num += 1
	if(process_num % 10000 == 0):
		logMsg("Still working. Processing trip " + str(process_num) + " of " + str(NUM_TRIPS) + ".")	
	
	#calculate the length of the hidden trip, i.e. the time difference
	#between when we last saw bike and when it pops up now
	t_1 = datetime.strptime(start_time, DT_FMT)
	t_2 = datetime.strptime(end_time, DT_FMT)
	delta_t = t_2 - t_1
	delta_t = delta_t.total_seconds()
	
	lower_bound_numeric = calendar.timegm(t_1.utctimetuple())
	upper_bound_numeric = calendar.timegm(t_2.utctimetuple())
	
	#these are used in visualization
	lower_date_id = str(t_1.year) + str(t_1.month)
	upper_date_id = str(t_2.year) + str(t_2.month)

	entry = (start_station, start_sid, end_station, end_sid, bike_id, start_time, lower_bound_numeric,lower_date_id, end_time, upper_bound_numeric, upper_date_id, delta_t)	
	hidden_trips.append(entry)

#first we must copy the original hidden trips into our
#extended hidden trip file
hidden_trip_file = csv.reader(open(HIDDEN_TRIP_FILE, "r"))
#write the hidden trips out to a csv file
output = csv.writer(open(OUTPUT, "w"))

for hidden_trip in hidden_trip_file:
	output.writerow(hidden_trip)

output = csv.writer(open(OUTPUT, "a"))

#now append the new hidden trips generated by this code.
for hidden_trip in hidden_trips:
	output.writerow(hidden_trip)

